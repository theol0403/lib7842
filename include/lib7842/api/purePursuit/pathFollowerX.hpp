#include "pathFollower.hpp"

namespace lib7842 {

class PathFollowerX : public PathFollower {
public:
  /**
   * PathFollowerX. Follows a generated path using a modified version of the Pure Pursuit algorithm
   * that controls strafing and turning.
   *
   * @param imodel         The chassis model.
   * @param iodometry      The odometry.
   * @param ichassisScales The powered wheel scales.
   * @param igearset       The powered wheel gearset multiplied by any external gear ratio.
   * @param ilookahead     The lookahead distance. Also used as the lookahead distance for angle
   *                       seeking.
   */
  PathFollowerX(const std::shared_ptr<XDriveModel>& imodel,
                const std::shared_ptr<Odometry>& iodometry, const ChassisScales& ichassisScales,
                const QAngularSpeed& igearset, const QLength& ilookahead);

  /**
   * Follow a pre-generated PursuitPath using holonomic control. Heading is independently controlled
   * according to angle setpoints in the path.
   *
   * @param ipath The path to follow. Must have velocity setpoints generated by
   *              PathGenerator::generateX.
   */
  void followPath(const PursuitPath& ipath);

protected:
  std::shared_ptr<XDriveModel> xModel {nullptr};
};

} // namespace lib7842
